@model DBGoreWebApp.Models.ViewModels.ArabaViewModel
<style>
    .resim-card {
        width: 100px;
        height: 100px;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        position: relative;
    }

    .resim-card img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .resim-card .close-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background: red;
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
</style>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />

<div class="container" style="max-width: 900px;">
    <h3 class="m-0 mb-4">Yeni Araba Ekle</h3>

    <form asp-action="Create" asp-controller="Arabalar" method="post" enctype="multipart/form-data"
        class="p-4 border rounded bg-light">
        <!-- Adres Seçimi -->
        <div class="row g-3">
            <label for="Adres" class="form-label bg-mavi">Adres Giriniz</label>
            <div class="col-md-12">
                <label for="Il" class="form-label">İl</label>
                <select id="Il" name="Il" class="form-select" required>
                    <option value="" disabled selected>İl Seçiniz</option>
                    @if (Model.Adresler != null && Model.Adresler.Any())
                    {
                        @foreach (var il in Model.Adresler.Select(a => a.Il).Distinct())
                        {
                            <option value="@il">@il</option>
                        }
                    }
                    else
                    {
                        <option value="">Adres bilgisi yok</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <label for="Ilce" class="form-label">İlçe</label>
                <select id="Ilce" name="Ilce" class="form-select" required>
                    <option value="" disabled selected>İlçe Seçiniz</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for="Mahalle" class="form-label">Mahalle</label>
                <select id="Mahalle" name="MahalleKoyAdi" class="form-select" required>
                    <option value="" disabled selected>Mahalle Seçiniz</option>
                </select>
            </div>
        </div>
        <input type="hidden" id="adresKonumu" name="AdresKonumu" value="">
        <div class="mt-2" id="girilenAdres" style="font-size: 14px; color: gray;">
            <p id="adresKonumuGoster" style="font-size: 14px; color: gray;">Adres: </p>
        </div>

        <!-- Marka Seçimi -->
        <div class="form-group mt-4">
            <label for="markaDropdown">Marka Seçin</label>
            <select id="markaDropdown" name="MarkaID" class="form-control">
                <option value="">Marka Seçin</option>
                @if (Model.AracMarkalaris != null)
                {
                    @foreach (var marka in Model.AracMarkalaris)
                    {
                        <option value="@marka.MarkaID">@marka.Marka</option>
                    }
                }
                else
                {
                    <option value="">Veri bulunamadı</option>
                }
            </select>
        </div>


        <!-- Model Seçimi -->
        <div class="form-group">
            <label for="modelDropdown">Model Seçin <span class="text-danger">*</span></label>
            <select id="modelDropdown" name="ModelID" class="form-control" required>
                <option value="">Model Seçin</option>
            </select>
            <div class="invalid-feedback">Lütfen bir model seçin.</div>
        </div>

        <!-- Yıl Seçimi -->
        <div class="form-group">
            <label for="yilDropdown">Yıl Seçin <span class="text-danger">*</span></label>
            <select id="yilDropdown" name="YilID" class="form-control" required>
                <option value="">Yıl Seçin</option>
            </select>
            <div class="invalid-feedback">Lütfen bir yıl seçin.</div>
        </div>

        <!-- Versiyon Seçimi -->
        <div class="form-group">
            <label for="versiyonDropdown">Versiyon Seçin <span class="text-danger">*</span></label>
            <select id="versiyonDropdown" name="VersiyonID" class="form-control" required>
                <option value="">Versiyon Seçin</option>
            </select>
            <div class="invalid-feedback">Lütfen bir versiyon seçin.</div>
        </div>

        <!-- Fiyat Girin -->
        <div class="form-group">
            <label for="FiyatDisplay" id="FiyatDisplay" class="form-label">Satış Fiyatı <span
                    class="text-danger">*</span></label>
            <input type="number" class="form-control" name="Fiyat" id="Fiyat" placeholder="Örn: 10000" required min="1">
            <div class="invalid-feedback">Lütfen geçerli bir fiyat girin.</div>
        </div>

        <!-- Başlık -->
        <div class="form-group">
            <label for="VersiyonAdi">Başlık <span class="text-danger">*</span></label>
            <input type="text" name="VersiyonAdi" id="VersiyonAdi" class="form-control" required>
            <div class="invalid-feedback">Lütfen başlık girin.</div>
        </div>

        <!-- Açıklama -->
        <div class="form-group">
            <label for="Ozellikleri">Açıklama <span class="text-danger">*</span></label>
            <textarea name="Ozellikleri" id="Ozellikleri" class="form-control" required></textarea>
            <div class="invalid-feedback">Lütfen açıklama girin.</div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const form = document.getElementById("arabaForm");

                form.addEventListener("submit", function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    form.classList.add("was-validated");
                });
            });
        </script>


        <!-- Resim Yükleme -->
        <div class="form-group mt-3">
            <label for="resimler">Resim Yükleme</label>
            <label class="text-warning fs-6" for="resimler">En fazla 12 adet resim ve toplam 50MB olmalıdır. Resim
                formatları jpg, jpeg, yada png olmalıdır</label>
            <input type="file" id="resimler" name="resimler" class="form-control"
                accept="image/png, image/jpeg, image/jpg" multiple />
            <p class="text-danger" id="file-error" style="display: none;"></p>
        </div>

        <!-- Resim Önizleme -->
        <div class="row mt-3" id="resimPreview" style="gap: 1rem;"></div>

        <!-- Kaydet Butonu -->
        <div class="form-group mt-3 text-center">
            <button type="submit" class="btn btn-primary" id="submit-btn">Kaydet</button>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    const adresGruplari = @Html.Raw(Json.Serialize(ViewBag.AdresGruplari));

    document.getElementById("Il").addEventListener("change", function () {
        const selectedIl = this.value;
        const ilceDropdown = document.getElementById("Ilce");
        const mahalleDropdown = document.getElementById("Mahalle");

        ilceDropdown.innerHTML = '<option value="" disabled selected>İlçe Seçiniz</option>';
        mahalleDropdown.innerHTML = '<option value="" disabled selected>Mahalle Seçiniz</option>';

        if (adresGruplari[selectedIl]) {
            for (const ilce in adresGruplari[selectedIl]) {
                const option = document.createElement("option");
                option.value = ilce;
                option.textContent = ilce;
                ilceDropdown.appendChild(option);
            }
        }
        updateGirilenAdres();
    });

    document.getElementById("Ilce").addEventListener("change", function () {
        const selectedIl = document.getElementById("Il").value;
        const selectedIlce = this.value;
        const mahalleDropdown = document.getElementById("Mahalle");

        mahalleDropdown.innerHTML = '<option value="" disabled selected>Mahalle Seçiniz</option>';

        if (adresGruplari[selectedIl] && adresGruplari[selectedIl][selectedIlce]) {
            adresGruplari[selectedIl][selectedIlce].forEach(mahalle => {
                const option = document.createElement("option");
                option.value = mahalle;
                option.textContent = mahalle;
                mahalleDropdown.appendChild(option);
            });
        }
        updateGirilenAdres();
    });

    document.getElementById("Mahalle").addEventListener("change", updateGirilenAdres);

    function updateGirilenAdres() {
        const il = document.getElementById("Il").value;
        const ilce = document.getElementById("Ilce").value;
        const mahalle = document.getElementById("Mahalle").value;

        const adres = `${il ? il : ""} ${ilce ? ilce : ""} ${mahalle ? mahalle : ""}`.trim();
        document.getElementById("girilenAdres").textContent = adres ? `Girilen Adres: ${adres}` : "Girilen adres burada görüntülenecek...";

        // Adres ID'sini sakla
        const adresId = findAdresId(il, ilce, mahalle);
        document.getElementById("adresKonumu").value = adresId ? adresId : '';
        document.getElementById("adresKonumuGoster").textContent = `AdresKonumu: ${document.getElementById("adresKonumu").value}`;

        console.log(`Hidden input (adresKonumu) değeri: ${document.getElementById("adresKonumu").value}`);

        // AJAX çağrısı yaparak verileri filtrele
        if (il && ilce && mahalle) {
            fetch(`/Home/FilterEmlak?il=${il}&ilce=${ilce}&mahalle=${mahalle}`)
                .then(response => response.text())
                .then(data => {
                    document.getElementById("emlakList").innerHTML = data;
                });
        }
    }

    function findAdresId(il, ilce, mahalle) {
        for (const ilKey in adresGruplari) {
            if (ilKey === il) {
                for (const ilceKey in adresGruplari[ilKey]) {
                    if (ilceKey === ilce) {
                        const mahalleList = adresGruplari[ilKey][ilceKey];
                        for (const mahalleItem of mahalleList) {
                            if (mahalleItem.MahalleKoyAdi === mahalle) {
                                return mahalleItem.Id; // Adres ID'sini döndür
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
</script>

<script>
    $(document).ready(function () {
        // Marka Seçimi
        $('#markaDropdown').change(function () {
            const markaId = $(this).val();
            $.getJSON(`/Arabalar/GetModels?markaId=${markaId}`, function (data) {
                $('#modelDropdown').empty().append('<option value="">Seçin...</option>');
                data.forEach(model => {
                    $('#modelDropdown').append(`<option value="${model.modelID}">${model.model}</option>`);
                });
            });
        });

        // Model Seçimi
        $('#modelDropdown').change(function () {
            const modelId = $(this).val();
            $.getJSON(`/Arabalar/GetYears?modelId=${modelId}`, function (data) {
                $('#yilDropdown').empty().append('<option value="">Seçin...</option>');
                data.forEach(year => {
                    $('#yilDropdown').append(`<option value="${year.yilID}">${year.yil}</option>`);
                });
            });
        });

        // Yıl Seçimi
        $('#yilDropdown').change(function () {
            const yilId = $(this).val();
            $.getJSON(`/Arabalar/GetVersions?yilId=${yilId}`, function (data) {
                $('#versiyonDropdown').empty().append('<option value="">Seçin...</option>');
                data.forEach(version => {
                    $('#versiyonDropdown').append(`<option value="${version.versiyonID}">${version.versiyonAdi}</option>`);
                });
            });
        });

        // Versiyon Seçimi
        $('#versiyonDropdown').change(function () {
            const versiyonId = $(this).val();
            $.getJSON(`/Arabalar/GetVersions?yilId=${$('#yilDropdown').val()}`, function (data) {
                const selectedVersion = data.find(v => v.versiyonID == versiyonId);
                $('#ozellikler').text(selectedVersion?.ozellikleri || 'Belirtilmemiş');
            });
        });

        // Resim Önizleme
        $('#resimler').change(function () {
            const files = Array.from(this.files);

            if (files.length > 10) {
                alert('En fazla 10 resim seçebilirsiniz!');
                this.value = ''; // Seçimi temizle
                return;
            }

            $('#resimPreview').empty();

            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const previewHtml = `
                        <div class="resim-card" data-index="${index}">
                            <img src="${e.target.result}" alt="${file.name}" />
                            <button class="close-btn" onclick="removeImage(${index})">&times;</button>
                        </div>
                    `;
                    $('#resimPreview').append(previewHtml);
                };
                reader.readAsDataURL(file);
            });
        });
    });

    // Resim Silme
    function removeImage(index) {
        const input = document.getElementById('resimler');
        const dt = new DataTransfer();

        Array.from(input.files).forEach((file, i) => {
            if (i !== index) {
                dt.items.add(file);
            }
        });

        input.files = dt.files;

        // Önizleme alanını güncelle
        $(`.resim-card[data-index="${index}"]`).remove();
    }
</script>

<script>
    $(document).ready(function () {
        $('#resimler').change(function () {
            const files = Array.from(this.files);
            const allowedExtensions = ['image/png', 'image/jpeg', 'image/jpg'];
            const maxFileSize = 50 * 1024 * 1024; // 50MB
            let totalSize = 0;
            $('#resimPreview').empty();
            $('#file-error').hide();

            if (files.length > 12) {
                $('#file-error').text('En fazla 12 resim yükleyebilirsiniz.').show();
                this.value = '';
                return;
            }

            let validFiles = [];
            files.forEach((file, index) => {
                totalSize += file.size;
                if (!allowedExtensions.includes(file.type)) {
                    $('#file-error').text('Geçersiz dosya türü: ' + file.name + ' sadece PNG, JPG, JPEG dosyaları kabul edilir.').show();
                } else if (totalSize > maxFileSize) {
                    $('#file-error').text('Toplam resim boyutu 50MB'ı geçemez.Lütfen daha küçük dosyalar seçin.').show();
                    this.value = '';
                    return;
                } else {
                    validFiles.push(file);
                }
            });

            if (validFiles.length === 0) {
                this.value = '';
                return;
            }

            const dt = new DataTransfer();
            validFiles.forEach(file => dt.items.add(file));
            this.files = dt.files;

            validFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const previewHtml = `
                        <div class="resim-card" data-index="${index}">
                            <img src="${e.target.result}" alt="${file.name}" />
                            <button class="close-btn" onclick="removeImage(${index})">&times;</button>
                        </div>
                    `;
                    $('#resimPreview').append(previewHtml);
                };
                reader.readAsDataURL(file);
            });
        });
    });

    function removeImage(index) {
        const input = document.getElementById('resimler');
        const dt = new DataTransfer();

        Array.from(input.files).forEach((file, i) => {
            if (i !== index) {
                dt.items.add(file);
            }
        });

        input.files = dt.files;
        $(`.resim-card[data-index="${index}"]`).remove();
    }
</script>